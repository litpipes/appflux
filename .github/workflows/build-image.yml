name: Push the Docker image to AWS ECR Repo
on:
  push:
    branches:
      - main

#env:
  # TF_CLOUD_ORGANIZATION: "${{ secrets.TF_CLOUD_ORGANIZATION }}"
  # TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  # TF_WORKSPACE: "${{ secrets.TF_WORKSPACE }}"
  # CONFIG_DIRECTORY: "./infra/"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Set ENV variables
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
      
      - name: Use the custom ENV variable
        run: |
          echo $REPO_NAME

  # build-image:
  #   name: Build Docker image
  #   runs-on: ubuntu-latest
  #   outputs:
  #     ecr_image_tag: ${{ steps.build-image.outputs.ecr_image_tag }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         role-to-assume: "${{ secrets.AWS_ROLE }}"
  #         output-credentials: true
  #         aws-region: us-east-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Get commit hash
  #       id: get-commit-hash
  #       run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
  #     - name: Get timestamp
  #       id: get-timestamp
  #       run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

  #     - name: Build, tag, and push the image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
  #         IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo ecr_image_tag=$IMAGE_TAG >> $GITHUB_OUTPUT
  #         echo $IMAGE_TAG

  # terraform-plan:
  #   name: "Terraform Plan"
  #   runs-on: ubuntu-latest
  #   needs: build-image
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       id: creds
  #       with:
  #         role-to-assume: "${{ secrets.AWS_ROLE }}"
  #         output-credentials: true
  #         aws-region: us-east-1

  #     - name: Upload Configuration
  #       uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
  #       id: plan-upload
  #       with:
  #         workspace: ${{ env.TF_WORKSPACE }}
  #         directory: ${{ env.CONFIG_DIRECTORY }}
  #         speculative: true

  #     - name: Create Plan Run
  #       uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
  #       id: plan-run
  #       with:
  #         workspace: ${{ env.TF_WORKSPACE }}
  #         configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
  #         plan_only: true
  #       env: 
  #         TF_VAR_ecr_image_tag: '"${{ needs.build-image.outputs.ecr_image_tag }}"'
  #         TF_VAR_ecr_image_repository: '"${{ secrets.REPO_NAME }}"'
  #         AWS_ACCESS_KEY_ID: ${{ steps.creds.outputs.aws-access-key-id }}
  #         AWS_SECRET_ACCESS_KEY: ${{ steps.creds.outputs.aws-secret-access-key }}
  #         AWS_SESSION_TOKEN: ${{ steps.creds.outputs.aws-session-token }}

  #     - name: Get Plan Output
  #       uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
  #       id: plan-output
  #       with:
  #         plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

  # terraform-aply:
  #   name: "Terraform Apply"
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   needs: [build-image, terraform-plan]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v3
  #       id: creds
  #       with:
  #         role-to-assume: "${{ secrets.AWS_ROLE }}"
  #         output-credentials: true
  #         aws-region: us-east-1

  #     - name: Upload Configuration
  #       uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
  #       id: apply-upload
  #       with:
  #         workspace: ${{ env.TF_WORKSPACE }}
  #         directory: ${{ env.CONFIG_DIRECTORY }}

  #     - name: Create Apply Run
  #       uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
  #       id: apply-run
  #       with:
  #         workspace: ${{ env.TF_WORKSPACE }}
  #         configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
  #       env: 
  #         TF_VAR_ecr_image_tag: '"${{ needs.build-image.outputs.ecr_image_tag }}"'
  #         TF_VAR_ecr_image_repository: '"${{ secrets.REPO_NAME }}"'
  #         AWS_ACCESS_KEY_ID: ${{ steps.creds.outputs.aws-access-key-id }}
  #         AWS_SECRET_ACCESS_KEY: ${{ steps.creds.outputs.aws-secret-access-key }}
  #         AWS_SESSION_TOKEN: ${{ steps.creds.outputs.aws-session-token }}

  #     - name: Apply
  #       uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
  #       if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
  #       id: apply
  #       with:
  #         run: ${{ steps.apply-run.outputs.run_id }}
  #         comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"